using System;

namespace SpearOfLonginus
{
    /// <summary>
    /// A basic vector struct. Emulates the XNA Vector struct, minus the static functions and variables.
    /// </summary>
    public struct Vector : IEquatable<Vector>
    {
        #region Static Properties

        /// <summary>
        /// Returns the basic vector of 0,0.
        /// </summary>
        /// <value>
        /// Zero
        /// </value>
        public static Vector Zero
        {
            get { return new Vector(0); }
        }

        /// <summary>
        /// Returns the basic vector of 1,1.
        /// </summary>
        /// <value>
        /// One
        /// </value>
        public static Vector One
        {
            get { return new Vector(1); }
        }

        #endregion

        #region Variables

        /// <summary>
        /// The X coordinate.
        /// </summary>
        public float X;

        /// <summary>
        /// The Y coordinate.
        /// </summary>
        public float Y;

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="Vector" /> struct.
        /// </summary>
        /// <param name="value">The value to use for both X and Y.</param>
        public Vector(float value)
        {
            X = value;
            Y = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Vector" /> struct.
        /// </summary>
        /// <param name="x">The x coordinate.</param>
        /// <param name="y">The y coordinate.</param>
        public Vector(float x, float y)
        {
            X = x;
            Y = y;
        }

        #endregion

        #region Vector Functions

        /// <summary>
        /// Returns the length of the vector.
        /// </summary>
        /// <returns></returns>
        public float Length()
        {
            return (float) Math.Sqrt((X*X) + (Y*Y));
        }

        /// <summary>
        /// Returns the length of the vector, squared.
        /// </summary>
        /// <returns></returns>
        public float LengthSquared()
        {
            float length = Length();

            return length*length;
        }

        /// <summary>
        /// Normalizes the vector.
        /// </summary>
        public void Normalize()
        {
            float length = Length();

            X /= length;
            Y /= length;
        }

        #endregion

        #region Function Overrides

        /// <summary>
        /// Determines whether the specified <see cref="System.Object" />, is equal to this instance.
        /// </summary>
        /// <param name="obj">The <see cref="System.Object" /> to compare with this instance.</param>
        /// <returns>
        ///   <c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.
        /// </returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (!(obj is Vector))
            {
                return false;
            }

            return Equals((Vector) obj);
        }

        /// <summary>
        /// Indicates whether the current object is equal to another object of the same type.
        /// </summary>
        /// <param name="other">An object to compare with this object.</param>
        /// <returns>
        /// true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
        /// </returns>
        public bool Equals(Vector other)
        {
            return X.Equals(other.X) && Y.Equals(other.Y);
        }

        /// <summary>
        /// Returns a hash code for this instance.
        /// </summary>
        /// <returns>
        /// A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        /// </returns>
        public override int GetHashCode()
        {
            //Autogenerated function. Why is it multiplied by the magical number that is 397?

            unchecked
            {
                return (X.GetHashCode() * 397) ^ Y.GetHashCode();
            }
        }

        /// <summary>
        /// Returns a <see cref="System.String" /> that represents this instance.
        /// </summary>
        /// <returns>
        /// A <see cref="System.String" /> that represents this instance.
        /// </returns>
        public override string ToString()
        {
            return "{" + X + "," + Y + "}";
        }

        #endregion

        #region Operator Overrides

        /// <summary>
        /// Adds the specified vector.
        /// </summary>
        /// <param name="v1">Vector 1.</param>
        /// <param name="v2">Vector 2.</param>
        /// <returns></returns>
        public static Vector operator +(Vector v1, Vector v2)
        {
            return new Vector(v1.X + v2.X, v1.Y + v2.Y);
        }

        /// <summary>
        /// Subtracts the specified vector.
        /// </summary>
        /// <param name="v1">Vector 1.</param>
        /// <param name="v2">Vector 2.</param>
        /// <returns></returns>
        public static Vector operator -(Vector v1, Vector v2)
        {
            return new Vector(v1.X - v2.X, v1.Y - v2.Y);
        }

        /// <summary>
        /// Multiplies the specified vector.
        /// </summary>
        /// <param name="v1">Vector 1.</param>
        /// <param name="v2">Vector 2.</param>
        /// <returns></returns>
        public static Vector operator *(Vector v1, Vector v2)
        {
            return new Vector(v1.X*v2.X, v1.Y*v2.Y);
        }

        /// <summary>
        /// Divides the specified vector.
        /// </summary>
        /// <param name="v1">Vector 1.</param>
        /// <param name="v2">Vector 2.</param>
        /// <returns></returns>
        public static Vector operator /(Vector v1, Vector v2)
        {
            return new Vector(v1.X/v2.X, v1.Y/v2.Y);
        }

        /// <summary>
        /// Multiplies the specified vector.
        /// </summary>
        /// <param name="vector">The vector.</param>
        /// <param name="value">The value to multiply by.</param>
        /// <returns></returns>
        public static Vector operator *(Vector vector, float value)
        {
            return new Vector(vector.X*value, vector.Y*value);
        }

        /// <summary>
        /// Divides the specified vector.
        /// </summary>
        /// <param name="vector">The vector.</param>
        /// <param name="value">The value to divide by.</param>
        /// <returns></returns>
        public static Vector operator /(Vector vector, float value)
        {
            return new Vector(vector.X/value, vector.Y/value);
        }

        #endregion
    }
}
